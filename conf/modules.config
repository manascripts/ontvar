/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'MULTIQC' {
        ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

<<<<<<< Updated upstream
}
=======
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // CASE LEVEL - 01-raw-calls: SV caller outputs (header-renamed VCFs)
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Raw SV caller outputs (don't publish - intermediate)
    withName: 'SNIFFLES' {
        cpus = 3
        memory = 3.GB
        ext.args = {
            def base_args = "--mapq ${params.mapq} --minsvlen ${params.minsvlen} --minsupport ${params.minsupport} --cluster-merge-pos ${params.cluster_merge_pos}"
            def phase_arg = params.phase ? "--phase" : ""
            def user_args = params.sniffles_args ? params.sniffles_args : ""
            return "${base_args} ${phase_arg} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Don't publish raw caller output
        ]
    }

    withName: 'CUTESV' {
        cpus = 4
        memory = 12.GB
        ext.args = {
            def base_args = "--min_support ${params.cutesv_min_support} --min_size ${params.min_size} --min_mapq ${params.cutesv_min_mapq}"
            base_args += " --max_cluster_bias_INS ${params.max_cluster_bias_INS} --diff_ratio_merging_INS ${params.diff_ratio_merging_INS}"
            base_args += " --max_cluster_bias_DEL ${params.max_cluster_bias_DEL} --diff_ratio_merging_DEL ${params.diff_ratio_merging_DEL}"
            def genotype_arg = params.genotype ? "--genotype" : ""
            def user_args = params.cutesv_args ? params.cutesv_args : ""
            return "${base_args} ${genotype_arg} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Don't publish raw caller output
        ]
    }

    withName: 'SEVERUS_WITH_CONTROL' {
        cpus = 4
        memory = 5.GB
        ext.args = {
            def base_args = "--min-sv-size ${params.min_sv_size} --min-mapq ${params.severus_min_mapq} --min-support ${params.severus_min_support}"
            def user_args = params.severus_args ? params.severus_args : ""
            return "${base_args} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Don't publish raw caller output
        ]
    }

    withName: 'SEVERUS_NO_CONTROL' {
        cpus = 4
        memory = 5.GB
        ext.args = {
            def base_args = "--min-sv-size ${params.min_sv_size} --PON \"${params.PON}\" --min-mapq ${params.severus_min_mapq} --min-support ${params.severus_min_support}"
            def user_args = params.severus_args ? params.severus_args : ""
            return "${base_args} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Don't publish raw caller output
        ]
    }

    // Header-renamed VCFs (these are the actual processed caller outputs)
    withName: 'RENAME_VCF_HEADERS_SNIFFLES' {
        cpus = 1
        memory = 1.GB
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/case/01_raw_calls/sniffles" },
            mode: params.publish_dir_mode,
            pattern: '*.{vcf,vcf.gz}'
        ]
    }

    withName: 'RENAME_VCF_HEADERS_CUTESV' {
        cpus = 1
        memory = 1.GB
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/case/01_raw_calls/cutesv" },
            mode: params.publish_dir_mode,
            pattern: '*.{vcf,vcf.gz}'
        ]
    }

    withName: 'RENAME_VCF_HEADERS_SEVERUS' {
        cpus = 1
        memory = 1.GB
        ext.args = ""
        publishDir = [
            enabled: false  // Don't publish severus outputs
        ]
    }

    // RENAME_VCF - This is the final Severus output step
    withName: 'RENAME_VCF' {
        cpus = 1
        memory = 1.GB
        ext.args = ""
        ext.when = { task.ext.meta = meta; true }  // Pass meta to task.ext for use in publishDir
        publishDir = [
            path: { "${params.outdir}/case/01_raw_calls/severus" },
            mode: params.publish_dir_mode,
            pattern: '*.{vcf,vcf.gz}',
            saveAs: { filename -> 
                // Get meta from task.ext
                def meta = task.ext.meta ?: [:]
                
                // Determine if this is tumor/normal or tumor-only
                def has_control = meta.has_control ?: false
                
                // Organize into subdirectories
                def subdir = has_control ? "tumor_normal" : "tumor_only"
                "${subdir}/${filename}"
            }
        ]
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // CASE LEVEL - 02-caller-merged: Sample consensus
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    withName: 'JASMINESV_SAMPLE' {
        cpus = 3
        memory = 3.GB
        ext.args = {
            def base_args = "--min_overlap ${params.min_overlap} --spec_len ${params.spec_len} --min_seq_id ${params.min_seq_id}"
            base_args += " --max_dist_linear ${params.max_dist_linear} --max_dist ${params.max_dist} --min_dist ${params.min_dist}"
            base_args += " --spec_reads ${params.spec_reads}"
            def boolean_args = ""
            boolean_args += params.pre_normalize ? " --pre_normalize" : ""
            boolean_args += params.normalize_type ? " --normalize_type" : ""
            boolean_args += params.ignore_strand ? " --ignore_strand" : ""
            boolean_args += params.non_mutual_distance ? " --non_mutual_distance" : ""
            boolean_args += params.output_genotypes ? " --output_genotypes" : ""
            def user_args = params.jasminesv_sample_args ? params.jasminesv_sample_args : ""
            return "${base_args}${boolean_args} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Intermediate step - don't publish here
        ]
    }

    // Sample consensus filtering and processing
    withName: 'JASMINE_HEADER_FIX' {
        publishDir = [
            enabled: false  // Intermediate step
        ]
        beforeScript = '''
            export TMPDIR="$PWD"
            export TMP="$PWD"
            export TEMP="$PWD"
            export BCFTOOLS_PLUGINS=""
            mkdir -p "$PWD/tmp"
        '''
        containerOptions = { "--bind ${task.workDir}:/tmp" }
    }

    withName: 'FILTER_CHR' {
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }

    withName: 'BCFTOOLS_SORT_SAMPLE' {
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // CASE LEVEL - Caller support filtering (require â‰¥N callers)
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    withName: 'CALLER_SUPPORT_FILTER' {
        cpus = 2
        memory = 2.GB
        ext.args = {
            // Build dynamic expression using min_caller_support parameter
            def support_expr = "INFO/SUPP>=${params.min_caller_support}"
            def base_args = "--include '${support_expr}'"
            def user_args = params.caller_support_filter_args ? params.caller_support_filter_args : ""
            return "${base_args} ${user_args}".trim()
        }
        ext.when = { task.ext.meta = meta; true }
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // CASE LEVEL - 02-sample-consensus-annotated
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    withName: 'SVDB_QUERY_SAMPLE' {
        cpus = 4
        memory = 3.GB
        ext.args = {
            def base_args = "--bnd_distance ${params.bnd_distance} --overlap ${params.overlap}"
            def user_args = params.svdb_query_args ? params.svdb_query_args : ""
            return "${base_args} ${user_args}".trim()
        }
        ext.when = { task.ext.meta = meta; true }
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }

    withName: 'ANNOTSV_PER_SAMPLE_RAW' {
        cpus = 6
        memory = 8.GB
        ext.args = {
            def base_args = "-genomeBuild ${params.genome_build} -vcf ${params.output_vcf} -SVminSize ${params.min_sv_size}"
            def user_args = params.annotsv_args ? params.annotsv_args : ""
            return "${base_args} ${user_args}".trim()
        }
        ext.when = { task.ext.meta = meta; true }
        publishDir = [
            path: { "${params.outdir}/case/02_caller_merged" },
            mode: params.publish_dir_mode,
            pattern: '*.{tsv,vcf}',
            saveAs: { filename -> 
                def meta = task.ext.meta ?: [:]
                def sample = meta.sample ?: meta.id ?: "unknown"
                filename.replaceAll(/^[^.]+/, "${sample}")
            }
        ]
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // CASE LEVEL - 03-caller-merged-filtered
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    withName: 'AF_FILTER' {
        cpus = 2
        memory = 2.GB
        ext.args = {
            // Build dynamic AF filter expression using threshold parameters
            def af_expr = "(INFO/AFgnomAD=\".\" || INFO/AFgnomAD<${params.max_gnomad_af}) && (INFO/AFneedLR=\".\" || INFO/AFneedLR<${params.max_needlr_af})"
            def base_args = "--include '${af_expr}'"
            def user_args = params.af_filter_args ? params.af_filter_args : ""
            return "${base_args} ${user_args}".trim()
        }
        ext.when = { task.ext.meta = meta; true }
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }

    withName: 'ANNOTSV_PER_SAMPLE' {
        cpus = 6
        memory = 8.GB
        ext.args = {
            def base_args = "-genomeBuild ${params.genome_build} -vcf ${params.output_vcf} -SVminSize ${params.min_sv_size}"
            def user_args = params.annotsv_args ? params.annotsv_args : ""
            return "${base_args} ${user_args}".trim()
        }
        ext.when = { task.ext.meta = meta; true }
        publishDir = [
            path: { "${params.outdir}/case/03_caller_merged_filtered" },
            mode: params.publish_dir_mode,
            pattern: '*.{tsv,vcf}',
            saveAs: { filename -> 
                def meta = task.ext.meta ?: [:]
                def sample = meta.sample ?: meta.id ?: "unknown"
                filename.replaceAll(/^[^.]+/, "${sample}")
            }
        ]
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // COHORT LEVEL OUTPUTS
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    withName: 'JASMINESV_COHORT' {
        cpus = 3
        memory = 3.GB
        ext.args = {
            def base_args = "--min_overlap ${params.min_overlap} --spec_len ${params.spec_len} --min_seq_id ${params.min_seq_id}"
            base_args += " --max_dist_linear ${params.max_dist_linear} --max_dist ${params.max_dist} --min_dist ${params.min_dist}"
            base_args += " --spec_reads ${params.spec_reads}"
            def boolean_args = ""
            boolean_args += params.pre_normalize ? " --pre_normalize" : ""
            boolean_args += params.normalize_type ? " --normalize_type" : ""
            boolean_args += params.ignore_strand ? " --ignore_strand" : ""
            boolean_args += params.non_mutual_distance ? " --non_mutual_distance" : ""
            boolean_args += params.output_genotypes ? " --output_genotypes" : ""
            def user_args = params.jasminesv_cohort_args ? params.jasminesv_cohort_args : ""
            return "${base_args}${boolean_args} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }
    
    withName: 'SVDB_QUERY_COHORT' {
        cpus = 4
        memory = 3.GB
        ext.args = {
            def base_args = "--bnd_distance ${params.bnd_distance} --overlap ${params.overlap}"
            def user_args = params.svdb_query_args ? params.svdb_query_args : ""
            return "${base_args} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }

    withName: 'AF_FILTER_COHORT' {
        cpus = 2
        memory = 2.GB
        ext.args = {
            // Build dynamic AF filter expression (same thresholds as sample-level)
            def af_expr = "(INFO/AFgnomAD=\".\" || INFO/AFgnomAD<${params.max_gnomad_af}) && (INFO/AFneedLR=\".\" || INFO/AFneedLR<${params.max_needlr_af})"
            def base_args = "--include '${af_expr}'"
            def user_args = params.af_filter_args ? params.af_filter_args : ""
            return "${base_args} ${user_args}".trim()
        }
        publishDir = [
            enabled: false  // Intermediate step
        ]
    }

    withName: 'ANNOTSV_COHORT' {
        cpus = 6
        memory = 8.GB
        ext.args = {
            def base_args = "-genomeBuild ${params.genome_build} -vcf ${params.output_vcf} -SVminSize ${params.min_sv_size}"
            def user_args = params.annotsv_args ? params.annotsv_args : ""
            return "${base_args} ${user_args}".trim()
        }
        publishDir = [
            path: { "${params.outdir}/cohort" },
            mode: params.publish_dir_mode,
            pattern: '*.{tsv,vcf}',
            saveAs: { filename -> 
                filename.replaceAll(/^[^.]+/, 'cohort')
            }
        ]
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // SUPPORTING FILES AND UTILITIES
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    withName: 'ANNOTSV_INSTALLANNOTATIONS' {
        cpus = 1
        memory = 4.GB
        time = '1h'
        publishDir = [
            path: { "${params.outdir ?: './results'}" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        beforeScript = '''
            export TMPDIR="$PWD"
            export APPTAINERENV_TMPDIR="$PWD"
            export SINGULARITYENV_TMPDIR="$PWD"
        '''
        containerOptions = { "--bind ${task.workDir}:/tmp" }
    }

    // Raw calls summary (in case/01-raw-calls/)
    withName: 'SUMMARIZE_CALLERS' {
        cpus = 1
        memory = 1.GB
        publishDir = [
            path: { "${params.outdir}/case/01_raw_calls" },
            mode: params.publish_dir_mode,
            pattern: '*_summary.json'
        ]
    }

    // Caller merged summary (in case/02-caller-merged/)
    withName: 'SUMMARIZE_CALLER_MERGED' {
        cpus = 1
        memory = 1.GB
        publishDir = [
            path: { "${params.outdir}/case/02_caller_merged" },
            mode: params.publish_dir_mode,
            pattern: '*_summary.json'
        ]
    }

    // Filtered merged summary (in case/04-caller-merged-filtered/)
    withName: 'SUMMARIZE_CALLER_MERGED_FILTERED' {
        cpus = 1
        memory = 1.GB
        publishDir = [
            path: { "${params.outdir}/case/03_caller_merged_filtered" },
            mode: params.publish_dir_mode,
            pattern: '*_summary.json'
        ]
    }

    // Cohort summary (in cohort/)
    withName: 'SUMMARIZE_COHORT' {
        cpus = 1
        memory = 1.GB
        publishDir = [
            path: { "${params.outdir}/cohort" },
            mode: params.publish_dir_mode,
            pattern: '*_summary.json'
        ]
    }

    // Utility modules that don't need to be published
    withName: 'UNTAR.*' {
        cpus = 1
        memory = 1.GB
        ext.args = ""
        publishDir = [
            enabled: false  // Don't publish intermediate untar files
        ]
    }
}
>>>>>>> Stashed changes
